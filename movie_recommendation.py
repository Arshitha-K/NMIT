# -*- coding: utf-8 -*-
"""Movie Recommendation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ox4ztxer1XtE3jmoqSbJn12KVoLSW6Bw
"""

#importing the dependencies(libraries)

import numpy as np
import pandas as pd
import difflib #to find the close match of a movie if there is a mistake in entering the movie
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Data collection and preprocessing

"""loading the data from csv to pandas"""

movies_data = pd.read_csv('/movies.csv')

#printing first 5 rows of datafile
movies_data.head()

#to find number of rows and coloumns
movies_data.shape

#selecting the relevant features for recommendation
selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('u')

# combining all the given features
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

#converting text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""to find the similarity score using cosine similarity"""

#getting the similarity score using cosine similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

#getting the movie name from the user
movie_name = input('Enter your favourite movie name :')

#creating a list with all the movie name
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match for the movie name given by the user
find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#find index of movie with title
index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_movie)

#getting a list of similar movies
similarity_score = list(enumerate(similarity[index_of_movie])) #enumerate is used to cary loop
print(similarity_score)

len(similarity_score)

# sorting the movies based on similarity scores
sorted_similar_movies = sorted(similarity_score, key=lambda x:x[1],reverse = True)
print(sorted_similar_movies) # arranging values in descending order

# print the name of similar movies based on index

print('Movies suggested for you : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<15):
    print(i,'.',title_from_index)
    i+=1

"""Movie Recommendation System"""

movie_name = input('Enter your favourite movie name :')
list_of_all_titles = movies_data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
close_match = find_close_match[0]
index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[index_of_movie]))
sorted_similar_movies = sorted(similarity_score, key=lambda x:x[1],reverse = True)
print('Movies suggested for you : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<15):
    print(i,'.',title_from_index)
    i+=1